/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthImport } from './routes/_unauth'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as UnauthRegisterImport } from './routes/_unauth/register'
import { Route as UnauthLoginImport } from './routes/_unauth/login'
import { Route as UnauthForgotPasswordImport } from './routes/_unauth/forgot-password'
import { Route as AuthDashboardImport } from './routes/_auth/dashboard'
import { Route as AuthEditUsernameImport } from './routes/_auth/edit.$username'

// Create/Update Routes

const UnauthRoute = UnauthImport.update({
  id: '/_unauth',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnauthRegisterRoute = UnauthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnauthRoute,
} as any)

const UnauthLoginRoute = UnauthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthRoute,
} as any)

const UnauthForgotPasswordRoute = UnauthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => UnauthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthEditUsernameRoute = AuthEditUsernameImport.update({
  id: '/edit/$username',
  path: '/edit/$username',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_unauth': {
      id: '/_unauth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_unauth/forgot-password': {
      id: '/_unauth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof UnauthForgotPasswordImport
      parentRoute: typeof UnauthImport
    }
    '/_unauth/login': {
      id: '/_unauth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthLoginImport
      parentRoute: typeof UnauthImport
    }
    '/_unauth/register': {
      id: '/_unauth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnauthRegisterImport
      parentRoute: typeof UnauthImport
    }
    '/_auth/edit/$username': {
      id: '/_auth/edit/$username'
      path: '/edit/$username'
      fullPath: '/edit/$username'
      preLoaderRoute: typeof AuthEditUsernameImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthEditUsernameRoute: typeof AuthEditUsernameRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthEditUsernameRoute: AuthEditUsernameRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface UnauthRouteChildren {
  UnauthForgotPasswordRoute: typeof UnauthForgotPasswordRoute
  UnauthLoginRoute: typeof UnauthLoginRoute
  UnauthRegisterRoute: typeof UnauthRegisterRoute
}

const UnauthRouteChildren: UnauthRouteChildren = {
  UnauthForgotPasswordRoute: UnauthForgotPasswordRoute,
  UnauthLoginRoute: UnauthLoginRoute,
  UnauthRegisterRoute: UnauthRegisterRoute,
}

const UnauthRouteWithChildren =
  UnauthRoute._addFileChildren(UnauthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UnauthRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/forgot-password': typeof UnauthForgotPasswordRoute
  '/login': typeof UnauthLoginRoute
  '/register': typeof UnauthRegisterRoute
  '/edit/$username': typeof AuthEditUsernameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UnauthRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/forgot-password': typeof UnauthForgotPasswordRoute
  '/login': typeof UnauthLoginRoute
  '/register': typeof UnauthRegisterRoute
  '/edit/$username': typeof AuthEditUsernameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_unauth': typeof UnauthRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_unauth/forgot-password': typeof UnauthForgotPasswordRoute
  '/_unauth/login': typeof UnauthLoginRoute
  '/_unauth/register': typeof UnauthRegisterRoute
  '/_auth/edit/$username': typeof AuthEditUsernameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/edit/$username'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/edit/$username'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_unauth'
    | '/_auth/dashboard'
    | '/_unauth/forgot-password'
    | '/_unauth/login'
    | '/_unauth/register'
    | '/_auth/edit/$username'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  UnauthRoute: typeof UnauthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  UnauthRoute: UnauthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_unauth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/edit/$username"
      ]
    },
    "/_unauth": {
      "filePath": "_unauth.tsx",
      "children": [
        "/_unauth/forgot-password",
        "/_unauth/login",
        "/_unauth/register"
      ]
    },
    "/_auth/dashboard": {
      "filePath": "_auth/dashboard.tsx",
      "parent": "/_auth"
    },
    "/_unauth/forgot-password": {
      "filePath": "_unauth/forgot-password.tsx",
      "parent": "/_unauth"
    },
    "/_unauth/login": {
      "filePath": "_unauth/login.tsx",
      "parent": "/_unauth"
    },
    "/_unauth/register": {
      "filePath": "_unauth/register.tsx",
      "parent": "/_unauth"
    },
    "/_auth/edit/$username": {
      "filePath": "_auth/edit.$username.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
